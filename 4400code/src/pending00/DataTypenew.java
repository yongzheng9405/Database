/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pending00;

import java.awt.FlowLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author zhangyongzheng
 */
public class DataTypenew extends javax.swing.JPanel {

    /**
     * Creates new form DataTypenew
     */
    public DataTypenew() {
        initComponents();
        this.setLayout(new FlowLayout());
        typebox.addItem("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        datatypepanel = new javax.swing.JPanel();
        resultshow = new javax.swing.JButton();
        type = new javax.swing.JLabel();
        typebox = new javax.swing.JComboBox<>();
        time = new javax.swing.JLabel();
        rightdata = new javax.swing.JTextField();
        type2 = new javax.swing.JLabel();
        ResetButton = new javax.swing.JButton();
        goLast = new javax.swing.JButton();
        flagButton = new javax.swing.JButton();
        leftdata = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        poi_table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        location_name = new javax.swing.JTextField();
        flaggggCheckBox = new javax.swing.JCheckBox();
        unflagButton = new javax.swing.JButton();
        datefrom = new datechooser.beans.DateChooserCombo();
        dateto = new datechooser.beans.DateChooserCombo();
        jLabel3 = new javax.swing.JLabel();
        flagimage = new javax.swing.JLabel();

        resultshow.setText("Applied Fillter");
        resultshow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultshowActionPerformed(evt);
            }
        });

        type.setFont(new java.awt.Font("Ayuthaya", 0, 14)); // NOI18N
        type.setText("Type");

        typebox.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        typebox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeboxActionPerformed(evt);
            }
        });

        time.setFont(new java.awt.Font("Ayuthaya", 0, 14)); // NOI18N
        time.setText("Time & Date");

        rightdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightdataActionPerformed(evt);
            }
        });

        type2.setFont(new java.awt.Font("Ayuthaya", 0, 14)); // NOI18N
        type2.setText("Data value");

        ResetButton.setText("Reset Filter");
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });

        goLast.setText("back");
        goLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goLastActionPerformed(evt);
            }
        });

        flagButton.setText("flag");
        flagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flagButtonActionPerformed(evt);
            }
        });

        leftdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftdataActionPerformed(evt);
            }
        });

        jLabel1.setText("to");

        poi_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DataType", "DataValue", "Time &Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        poi_table.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(poi_table);

        jLabel2.setText("to");

        flaggggCheckBox.setText("flag?");
        flaggggCheckBox.setEnabled(false);
        flaggggCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flaggggCheckBoxActionPerformed(evt);
            }
        });

        unflagButton.setText("unflag");
        unflagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unflagButtonActionPerformed(evt);
            }
        });

        datefrom.setCalendarPreferredSize(new java.awt.Dimension(400, 180));
        try {
            datefrom.setDefaultPeriods(new datechooser.model.multiple.PeriodSet());
        } catch (datechooser.model.exeptions.IncompatibleDataExeption e1) {
            e1.printStackTrace();
        }
        datefrom.setMaxDate(dateto.getMinDate());

        dateto.setCalendarPreferredSize(new java.awt.Dimension(400, 180));
        try {
            dateto.setDefaultPeriods(new datechooser.model.multiple.PeriodSet());
        } catch (datechooser.model.exeptions.IncompatibleDataExeption e1) {
            e1.printStackTrace();
        }
        dateto.setMinDate(datefrom.getMaxDate());

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("POI Detail");

        flagimage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pending00/flag-icon.png"))); // NOI18N

        javax.swing.GroupLayout datatypepanelLayout = new javax.swing.GroupLayout(datatypepanel);
        datatypepanel.setLayout(datatypepanelLayout);
        datatypepanelLayout.setHorizontalGroup(
            datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datatypepanelLayout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(goLast, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91)
                .addComponent(flagButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(unflagButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, datatypepanelLayout.createSequentialGroup()
                .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(datatypepanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(datatypepanelLayout.createSequentialGroup()
                        .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(datatypepanelLayout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(location_name, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(flaggggCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(datatypepanelLayout.createSequentialGroup()
                                .addGap(151, 151, 151)
                                .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(datatypepanelLayout.createSequentialGroup()
                                            .addComponent(type)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(typebox, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(datatypepanelLayout.createSequentialGroup()
                                            .addComponent(type2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(datatypepanelLayout.createSequentialGroup()
                                                    .addGap(159, 159, 159)
                                                    .addComponent(jLabel3))
                                                .addGroup(datatypepanelLayout.createSequentialGroup()
                                                    .addGap(113, 113, 113)
                                                    .addComponent(leftdata, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(43, 43, 43)
                                                    .addComponent(jLabel1)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(rightdata, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(datatypepanelLayout.createSequentialGroup()
                                        .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(datatypepanelLayout.createSequentialGroup()
                                                .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(35, 35, 35)
                                                .addComponent(datefrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(20, 20, 20)
                                                .addComponent(jLabel2)
                                                .addGap(18, 18, 18))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, datatypepanelLayout.createSequentialGroup()
                                                .addComponent(resultshow, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(35, 35, 35)))
                                        .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ResetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dateto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(flagimage)))
                .addGap(80, 80, 80))
        );
        datatypepanelLayout.setVerticalGroup(
            datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, datatypepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datatypepanelLayout.createSequentialGroup()
                        .addComponent(flagimage)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(datatypepanelLayout.createSequentialGroup()
                        .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(location_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(flaggggCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(datatypepanelLayout.createSequentialGroup()
                                .addComponent(type)
                                .addGap(24, 24, 24)
                                .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(type2)
                                    .addComponent(leftdata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rightdata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(datatypepanelLayout.createSequentialGroup()
                                        .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(time)
                                            .addComponent(datefrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(22, 22, 22)
                                        .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(resultshow)
                                            .addComponent(ResetButton)))
                                    .addComponent(dateto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(typebox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)))
                .addGroup(datatypepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goLast)
                    .addComponent(flagButton)
                    .addComponent(unflagButton))
                .addContainerGap(115, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(datatypepanel, javax.swing.GroupLayout.PREFERRED_SIZE, 874, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(datatypepanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resultshowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultshowActionPerformed
        // TODO add your handling code here:
        Connection con = null;
        Statement mystat = null;
        ResultSet myrs = null;
        int r,l;
        //String s_type = (String) typebox.getSelectedItem();
        String r_value = rightdata.getText();
        String l_value = leftdata.getText();
        String location = location_name.getText();
        DefaultTableModel model = (DefaultTableModel)poi_table.getModel();

        try {
            
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_32",
                "cs4400_32","cSPtL15a");
            if(!con.isClosed())
            System.out.println("Successfully connected to " +"MySQL server using TCP/IP...");
            mystat = con.createStatement();
            String state_findpoi = "SELECT datavalue,dtype,DateTime FROM DataPoint where DLocationName = '"+location+"' AND Accepted = true ";
            System.out.println(888888888);
            if(typebox.getSelectedItem().equals("")){
                state_findpoi = state_findpoi;
            }
            else{
                String s_type = (String) typebox.getSelectedItem();
                state_findpoi = state_findpoi + "AND dtype = '"+ s_type + "' ";
            }
            
            
            if(leftdata.getText().trim().equals("") && rightdata.getText().trim().equals("")){
                state_findpoi = state_findpoi;
            }
            else if(rightdata.getText().trim().equals("") && !leftdata.getText().trim().equals("")){
                state_findpoi = state_findpoi + " AND datavalue >= '" +l_value+ "' ";
            }
            else if(leftdata.getText().trim().equals("") && !rightdata.getText().trim().equals("")){
                state_findpoi = state_findpoi + " AND datavalue <= '" +r_value+ "' ";
            }
            else if(!leftdata.getText().trim().equals("") && !rightdata.getText().trim().equals("")){
                int right,left;
                right = Integer.parseInt(r_value);
                left = Integer.parseInt(l_value);
                if(right > left){
                state_findpoi = state_findpoi + "AND datavalue <='" + r_value + "' AND datavalue >= '"+l_value+"'";
                }
                else{
                    state_findpoi = state_findpoi + "AND datavalue <='" + r_value + "' AND datavalue >= '"+l_value+"'";
                }
            }
            System.out.println(state_findpoi);
            
            String date12;
            date12 = datefrom.getText();
            if(date12.equals("")){
                state_findpoi = state_findpoi;
            }
            else{
            java.util.Date actualldate12 = null;
            SimpleDateFormat yy3 = new SimpleDateFormat( "MM/dd/yy" );
            SimpleDateFormat yyyy3 = new SimpleDateFormat( "yyyy-MM-dd" );
            actualldate12 =  (java.util.Date) yy3.parse(date12);
            String startdate3 = yyyy3.format(actualldate12);
            state_findpoi = state_findpoi + " AND  DateTime > '"+ startdate3 +"'";
            }
            
            System.out.println("5");
            
            String date22;
            date22 = dateto.getText();
            if(date22.equals("")){
                state_findpoi =state_findpoi;
            }
            else{
            java.util.Date actualldate23 = null;
            SimpleDateFormat yy2 = new SimpleDateFormat( "MM/dd/yy" );
            SimpleDateFormat yyyy2 = new SimpleDateFormat( "yyyy-MM-dd" );
            actualldate23 =  (java.util.Date) yy2.parse(date22);
            String enddate3 = yyyy2.format(actualldate23);
            state_findpoi = state_findpoi + "AND DateTime <'"+ enddate3+"'";
            }
            state_findpoi = state_findpoi + "ORDER BY DateTime;";
            System.out.println(state_findpoi);
            
            
            
            myrs = mystat.executeQuery(state_findpoi);
            while(myrs.next()){
                model.addRow(new Object[]{myrs.getString(2),Integer.parseInt(myrs.getString(1)),myrs.getString(3)});
                System.out.println(myrs.getString(1));
            }
            Refresh();
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                    Sort(model);
                    con.close();
            } catch(SQLException e) {}
        }
        //}
    }//GEN-LAST:event_resultshowActionPerformed
    private void Refresh(){
        Connection con = null;
            DefaultTableModel model2;
            model2 = (DefaultTableModel) poi_table.getModel();
            int rowCount = model2.getRowCount();
            for (int i = rowCount-1; i >= 0; i--) {
                model2.removeRow(i);
            }
        int flag = 0;
        Statement mystat = null;
        ResultSet myrs = null;
        String r_value = rightdata.getText();
        String l_value = leftdata.getText();
        String location = location_name.getText();
        DefaultTableModel model = (DefaultTableModel)poi_table.getModel();

        try {
            
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_32",
                "cs4400_32","cSPtL15a");
            if(!con.isClosed())
            System.out.println("Successfully connected to " +"MySQL server using TCP/IP...");
            mystat = con.createStatement();

           
            String state_findpoi = "SELECT datavalue,dtype,DateTime FROM DataPoint WHERE DLocationName = '"+location+"' AND Accepted = true ";
            System.out.println(state_findpoi);
          
            if(typebox.getSelectedItem().equals("")){
                state_findpoi = state_findpoi;
            }
            else{
                String s_type = (String) typebox.getSelectedItem();
                state_findpoi = state_findpoi + "AND dtype = '"+ s_type + "' ";
            }
            
            
            if(leftdata.getText().trim().equals("") && rightdata.getText().trim().equals("")){
                state_findpoi = state_findpoi;
            }
            else if(rightdata.getText().trim().equals("") && !leftdata.getText().trim().equals("")){
                state_findpoi = state_findpoi + " AND datavalue >= '" +l_value+ "' ";
            }
            else if(leftdata.getText().trim().equals("") && !rightdata.getText().trim().equals("")){
                state_findpoi = state_findpoi + " AND datavalue <= '" +r_value+ "' ";
            }
            else if(!leftdata.getText().trim().equals("") && !rightdata.getText().trim().equals("")){
                int right,left;
                right = Integer.parseInt(r_value);
                left = Integer.parseInt(l_value);
                if(right > left){
                state_findpoi = state_findpoi + "AND datavalue <='" + r_value + "' AND datavalue >= '"+l_value+"'";
                }
                else{
                    flag = 1;
                    state_findpoi = state_findpoi + "AND datavalue <='" + r_value + "' AND datavalue >= '"+l_value+"'";
                    valueerrorinDataType error = new valueerrorinDataType();
                    JFrame frame = new JFrame("Sorry!");
                    frame.setContentPane(error.jPanel1);
                    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    frame.setLocationRelativeTo(null);
                    frame.pack();
                    frame.setVisible(true);
                }
            }
            System.out.println(state_findpoi);
            String date123;
            date123 = datefrom.getText();
            if(date123.equals("")){
                state_findpoi = state_findpoi;
            }
            else{
            java.util.Date actualldate123 = null;
            SimpleDateFormat yy3 = new SimpleDateFormat( "MM/dd/yy" );
            SimpleDateFormat yyyy3 = new SimpleDateFormat( "yyyy-MM-dd" );
            actualldate123 =  (java.util.Date) yy3.parse(date123);
            String startdate3 = yyyy3.format(actualldate123);
            state_findpoi = state_findpoi + " AND  DateTime > '"+ startdate3 +"'";
            }
            
            System.out.println("5");
            
            String date223;
            date223 = dateto.getText();
            if(date223.equals("")){
                state_findpoi =state_findpoi;
            }
            else{
            java.util.Date actualldate233 = null;
            SimpleDateFormat yy2 = new SimpleDateFormat( "MM/dd/yy" );
            SimpleDateFormat yyyy2 = new SimpleDateFormat( "yyyy-MM-dd" );
            actualldate233 =  (java.util.Date) yy2.parse(date223);
            String enddate3 = yyyy2.format(actualldate233);
            state_findpoi = state_findpoi + "AND DateTime <'"+ enddate3+"'";
            }
            
            state_findpoi = state_findpoi + "ORDER BY DateTime;";
            System.out.println(state_findpoi);
            
            
            
            myrs = mystat.executeQuery(state_findpoi);
            while(myrs.next()){
                model.addRow(new Object[]{myrs.getString(2),Integer.parseInt(myrs.getString(1)),myrs.getString(3)});
                System.out.println(myrs.getString(1));
                System.out.println("sucees");
            }
            
            ResultSet myrs2 = mystat.executeQuery(state_findpoi);
            if(!myrs2.next() && flag == 0){
                NoPoiResult nores = new NoPoiResult();
                        JFrame frame = new JFrame("Sorry!");
                        frame.setContentPane(nores.jPanel1);
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.setLocationRelativeTo(null);
                        frame.pack();
                        frame.setVisible(true);
            }
        
    }catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                    con.close();
                    Sort(model);
            } catch(SQLException e) {}
        }
        //}
    }
    private void typeboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeboxActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_typeboxActionPerformed

    private void rightdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightdataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rightdataActionPerformed

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        // TODO add your handling code here:
        typebox.setSelectedIndex(0);
        leftdata.setText("");
        rightdata.setText("");
        
        datefrom.setCurrent(null);
        dateto.setCurrent(null);
        Connection con = null;
        DefaultTableModel model2;
        model2 = (DefaultTableModel) poi_table.getModel();
        int rowCount = model2.getRowCount();
        for (int i = rowCount-1; i >= 0; i--) {
                model2.removeRow(i);
            }
    }//GEN-LAST:event_ResetButtonActionPerformed

    private void goLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goLastActionPerformed
        // TODO add your handling code here:

        this.removeAll();
        ViewPoinew vpn = new ViewPoinew();
        this.add(vpn);
        validate();
        repaint();

    }//GEN-LAST:event_goLastActionPerformed

    private void flagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flagButtonActionPerformed
        // TODO add your handling code here:
        Connection con = null;
        Statement mystat = null;
        String location = location_name.getText();
        Date date = new Date();
        SimpleDateFormat ft =
        new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss");
        String dateflag = ft.format(date);
        System.out.println(dateflag);

        String state = "UPDATE POI SET Flag = 1,DateFlaged = '"+dateflag+"' WHERE LocationName = '"+location+"';";
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_32",
                "cs4400_32","cSPtL15a");
            if(!con.isClosed())
            System.out.println("Successfully connected to " +"MySQL server using TCP/IP...");
            System.out.println("UPDATE POI SET Flag = 1,DateFlaged = '"+dateflag+"' WHERE LocationName = '"+location+"';");
            mystat = con.createStatement();
            this.flaggggCheckBox.setSelected(true);
            flagimage.setVisible(true);
            mystat.executeUpdate(state);
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }

    }//GEN-LAST:event_flagButtonActionPerformed

    private void leftdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftdataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_leftdataActionPerformed

    private void flaggggCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flaggggCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flaggggCheckBoxActionPerformed

    private void unflagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unflagButtonActionPerformed
        // TODO add your handling code here:
        Connection con = null;
        Statement mystat = null;
        String location = location_name.getText();
        Date date = new Date();
        SimpleDateFormat ft =
        new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss");
        String dateflag = ft.format(date);
        System.out.println(dateflag);
        
        String state = "UPDATE POI SET Flag = 0,DateFlaged = null where LocationName = '"+location+"';";
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_32",
                "cs4400_32","cSPtL15a");
            if(!con.isClosed())
            System.out.println("Successfully connected to " +"MySQL server using TCP/IP...");
            System.out.println("UPDATE POI SET Flag = 0,DateFlaged = NULL where LocationName = '"+location+"';");
            mystat = con.createStatement();
          
            mystat.executeUpdate(state);
            this.flaggggCheckBox.setSelected(false);
            flagimage.setVisible(false);

        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }
        
    }//GEN-LAST:event_unflagButtonActionPerformed
        private void Sort(DefaultTableModel model){
            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel> (model);
            poi_table.setRowSorter(sorter);
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ResetButton;
    public javax.swing.JPanel datatypepanel;
    private datechooser.beans.DateChooserCombo datefrom;
    private datechooser.beans.DateChooserCombo dateto;
    private javax.swing.JButton flagButton;
    public javax.swing.JCheckBox flaggggCheckBox;
    public javax.swing.JLabel flagimage;
    private javax.swing.JButton goLast;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextField leftdata;
    public javax.swing.JTextField location_name;
    private javax.swing.JTable poi_table;
    private javax.swing.JButton resultshow;
    public javax.swing.JTextField rightdata;
    public javax.swing.JLabel time;
    public javax.swing.JLabel type;
    public javax.swing.JLabel type2;
    public javax.swing.JComboBox<String> typebox;
    private javax.swing.JButton unflagButton;
    // End of variables declaration//GEN-END:variables
}
